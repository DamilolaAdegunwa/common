<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeSnippet.ConsoleApp</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:CodeSnippet.ConsoleApp.AsyncTest.GetUsersAsync(System.Collections.Generic.IEnumerable{System.Int32})" -->
        <member name="P:CodeSnippet.ConsoleApp.LearningAboutDelegates.DelegateTest`1.SimpleStringConsoleDisplay">
            <value>
            Get a "Simple" object of type string for display
            </value>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.LearningAboutDelegates.DelegateSecondTest.AddInts(System.Int32,System.Int32)">
            <example>
            <code>
             UseMathematics(10, 20, AddInts);
             or
             var sum = AddInts(10,20);
            </code>
            </example>
        </member>
        <member name="T:CodeSnippet.ConsoleApp.LearningAboutDelegates.Logger">
            <summary>
            SUMMARY:
            <para>The main logger service for making writing information, debug, trace and warning messages</para>
            <para>Also includes the fatal, danger, error and test messages</para>
            </summary>
            <remarks>
            <para>It has the "WriteMessage" property,</para>
            <para>The "LogMessage" method</para>
            </remarks>
        </member>
        <member name="T:CodeSnippet.ConsoleApp.FirebaseSample">
            <summary>
            Firebase Sample Class
            </summary>
        </member>
        <member name="T:CodeSnippet.ConsoleApp.IIdentityOrIPrincipal">
            <summary>
            <para>this class use the <c>System.Web.Script.Serialization</c> a whole lot!</para>
            </summary>
        </member>
        <member name="P:CodeSnippet.ConsoleApp.CustomPrincipalSerializeModel.Id">
            <summary>
            get the Id in question
            </summary>
            <value>this is the Id and is of type <c>int</c></value>
        </member>
        <member name="T:CodeSnippet.ConsoleApp.InteroperabilityTest">
            <summary>
            Interoperability: this run test for understanding codes bordering managed and managed code...
            </summary>
            <remarks>
            We test for COM, COM+, C++/CLI, WINDOWS API, Active X etc. 
            </remarks>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.StudentClass.GetPercentile(CodeSnippet.ConsoleApp.StudentClass.Student)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <see cref="!:https://www.stackoverflow.com"/>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.StackOverflowQuestionsAndAnswerExercise.Start_Via_Dispatcher_OnClick(System.Object,CodeSnippet.ConsoleApp.StackOverflowQuestionsAndAnswerExercise.RoutedEventArgs)">
            <summary>
            Start a long series of asynchronous tasks using the `Dispatcher` for coordinating
            UI updates.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.StackOverflowQuestionsAndAnswerExercise.Start_Via_SynchronizationContext_OnClick(System.Object,CodeSnippet.ConsoleApp.StackOverflowQuestionsAndAnswerExercise.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.StackOverflowQuestionsAndAnswerExercise.Start_Via_TaskScheduler_OnClick(System.Object,CodeSnippet.ConsoleApp.StackOverflowQuestionsAndAnswerExercise.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.StackOverflowQuestionsAndAnswerExercise.ReportProgressTask(System.Threading.Tasks.TaskScheduler,System.Func{System.Int32})">
            <summary>
            
            </summary>
            <param name="taskScheduler"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:CodeSnippet.ConsoleApp.XMLComments.Math">
            <summary>
            The main <c>Math</c> class.
            Contains all methods for performing basic math functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Addition Operation</description>
            </item>
            <item>
            <term>Subtract</term>
            <description>Subtraction Operation</description>
            </item>
            <item>
            <term>Multiply</term>
            <description>Multiplication Operation</description>
            </item>
            <item>
            <term>Divide</term>
            <description>Division Operation</description>
            </item>
            </list>
            </summary>
            <remarks>
            This class can add, subtract, multiply and divide.
            </remarks>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments.Math.Add(System.Int32,System.Int32)">
            <summary>
            Adds two integers and returns the result.
            </summary>
            <returns>
            The sum of two integers.
            </returns>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments.Math.Add(System.Double,System.Double)">
            <returns>
            The sum of two doubles.
            </returns>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments.Math.Subtract(System.Int32,System.Int32)">
            <returns>
            The difference of two integers.
            </returns>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments.Math.Subtract(System.Double,System.Double)">
            <returns>
            The difference of two integers.
            </returns>
        </member>
        <member name="T:CodeSnippet.ConsoleApp.XMLComments2.Math">
            <summary>
            The main <c>Math</c> class.
            Contains all methods for performing basic math functions.
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Addition Operation</description>
            </item>
            <item>
            <term>Subtract</term>
            <description>Subtraction Operation</description>
            </item>
            <item>
            <term>Multiply</term>
            <description>Multiplication Operation</description>
            </item>
            <item>
            <term>Divide</term>
            <description>Division Operation</description>
            </item>
            </list>
            </summary>
            <remarks>
            <para>This class can add, subtract, multiply and divide.</para>
            <para>These operations can be performed on both integers and doubles.</para>
            </remarks>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Int32,System.Int32)">
            <summary>
            Adds two integers <paramref name="a"/> and <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The sum of two integers.
            </returns>
            <example>
            <code>
            int c = Math.Add(4, 5);
            if (c > 10)
            {
            Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.OverflowException">Thrown when one parameter is max
            and the other is greater than 0.</exception>
            See <see cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Double,System.Double)"/> to add doubles.
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Int32,System.Int32)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Int32,System.Int32)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Int32,System.Int32)"/>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Double,System.Double)">
            <summary>
            Adds two doubles <paramref name="a"/> and <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The sum of two doubles.
            The sum of two doubles.
            </returns>
            <example>
            <code>
            double c = Math.Add(4.5, 5.4);
            if (c > 10)
            {
            Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.OverflowException">Thrown when one parameter is max
            and the other is greater than 0.</exception>
            See <see cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Int32,System.Int32)"/> to add integers.
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Double,System.Double)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Double,System.Double)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Double,System.Double)"/>
            <param name="a">A double precision number.</param>
            <param name="b">A double precision number.</param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Int32,System.Int32)">
            <summary>
            Subtracts <paramref name="b"/> from <paramref name="a"/> and returns the result.
            </summary>
            <returns>
            The difference between two integers.
            </returns>
            <example>
            <code>
            int c = Math.Subtract(4, 5);
            if (c > 1)
            {
            Console.WriteLine(c);
            }
            </code>
            </example>
            See <see cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Double,System.Double)"/> to subtract doubles.
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Int32,System.Int32)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Int32,System.Int32)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Int32,System.Int32)"/>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Double,System.Double)">
            <summary>
            Subtracts a double <paramref name="b"/> from another double <paramref name="a"/> and returns the result.
            </summary>
            <returns>
            The difference between two doubles.
            </returns>
            <example>
            <code>
            double c = Math.Subtract(4.5, 5.4);
            if (c > 1)
            {
            Console.WriteLine(c);
            Console.WriteLine(c);
            }
            </code>
            </example>
            See <see cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Int32,System.Int32)"/> to subtract integers.
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Double,System.Double)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Double,System.Double)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Double,System.Double)"/>
            <param name="a">A double precision number.</param>
            <param name="b">A double precision number.</param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies two integers <paramref name="a"/> and <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The product of two integers.
            </returns>
            <example>
            <code>
            int c = Math.Multiply(4, 5);
            if (c > 100)
            {
            Console.WriteLine(c);
            }
            </code>
            </example>
            See <see cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Double,System.Double)"/> to multiply doubles.
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Int32,System.Int32)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Int32,System.Int32)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Int32,System.Int32)"/>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Double,System.Double)">
            <summary>
            Multiplies two doubles <paramref name="a"/> and <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The product of two doubles.
            </returns>
            <example>
            <code>
            double c = Math.Multiply(4.5, 5.4);
            if (c > 100.0)
            {
            Console.WriteLine(c);
            }
            </code>
            </example>
            See <see cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Int32,System.Int32)"/> to multiply integers.
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Double,System.Double)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Double,System.Double)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Double,System.Double)"/>
            <param name="a">A double precision number.</param>
            <param name="b">A double precision number.</param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Int32,System.Int32)">
            <summary>
            Divides an integer <paramref name="a"/> by another integer <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The quotient of two integers.
            </returns>
            <example>
            <code>
            int c = Math.Divide(4, 5);
            if (c > 1)
            {
            Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.DivideByZeroException">Thrown when <paramref name="b"/> is equal to 0.
            </exception>
            See <see cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Double,System.Double)"/> to divide doubles.
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Int32,System.Int32)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Int32,System.Int32)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Int32,System.Int32)"/>
            <param name="a">An integer dividend.</param>
            <param name="b">An integer divisor.</param>
        </member>
        <member name="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Double,System.Double)">
            <summary>
            Divides a double <paramref name="a"/> by another double <paramref name="b"/> and returns the result.
            </summary>
            <returns>
            The quotient of two doubles.
            </returns>
            <example>
            <code>
            double c = Math.Divide(4.5, 5.4);
            if (c > 1.0)
            {
            Console.WriteLine(c);
            }
            </code>
            </example>
            <exception cref="T:System.DivideByZeroException">Thrown when <paramref name="b"/> is equal to 0.
            </exception>
            See <see cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Divide(System.Int32,System.Int32)"/> to divide integers.
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Add(System.Double,System.Double)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Subtract(System.Double,System.Double)"/>
            <seealso cref="M:CodeSnippet.ConsoleApp.XMLComments2.Math.Multiply(System.Double,System.Double)"/>
            <param name="a">A double precision dividend.</param>
            <param name="b">A double precision divisor.</param>
        </member>
    </members>
</doc>
